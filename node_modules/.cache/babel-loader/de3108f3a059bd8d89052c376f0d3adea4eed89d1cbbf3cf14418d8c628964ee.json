{"ast":null,"code":"import axios from 'axios';\n\n// Mock data for development purposes\n// In a production environment, you would replace these with actual API calls\n\n// Global temperature anomaly data (source: NASA GISS)\nconst mockTemperatureData = [{\n  year: 1880,\n  anomaly: -0.16\n}, {\n  year: 1890,\n  anomaly: -0.35\n}, {\n  year: 1900,\n  anomaly: -0.09\n}, {\n  year: 1910,\n  anomaly: -0.39\n}, {\n  year: 1920,\n  anomaly: -0.27\n}, {\n  year: 1930,\n  anomaly: -0.03\n}, {\n  year: 1940,\n  anomaly: 0.12\n}, {\n  year: 1950,\n  anomaly: -0.02\n}, {\n  year: 1960,\n  anomaly: 0.03\n}, {\n  year: 1970,\n  anomaly: 0.01\n}, {\n  year: 1980,\n  anomaly: 0.27\n}, {\n  year: 1990,\n  anomaly: 0.45\n}, {\n  year: 2000,\n  anomaly: 0.61\n}, {\n  year: 2010,\n  anomaly: 0.82\n}, {\n  year: 2020,\n  anomaly: 1.02\n}, {\n  year: 2022,\n  anomaly: 1.11\n}];\n\n// CO2 concentration data (source: Mauna Loa Observatory)\nconst mockCO2Data = [{\n  year: 1960,\n  ppm: 316.91\n}, {\n  year: 1970,\n  ppm: 325.68\n}, {\n  year: 1980,\n  ppm: 338.75\n}, {\n  year: 1990,\n  ppm: 354.35\n}, {\n  year: 2000,\n  ppm: 369.52\n}, {\n  year: 2010,\n  ppm: 389.85\n}, {\n  year: 2020,\n  ppm: 412.44\n}, {\n  year: 2022,\n  ppm: 417.06\n}];\n\n// Sea level rise data (source: CSIRO)\nconst mockSeaLevelData = [{\n  year: 1880,\n  rise: -120\n}, {\n  year: 1900,\n  rise: -100\n}, {\n  year: 1920,\n  rise: -80\n}, {\n  year: 1940,\n  rise: -60\n}, {\n  year: 1960,\n  rise: -40\n}, {\n  year: 1980,\n  rise: -20\n}, {\n  year: 2000,\n  rise: 0\n}, {\n  year: 2020,\n  rise: 90\n}, {\n  year: 2022,\n  rise: 101\n}];\n\n// Extreme weather events data\nconst mockExtremeEventsData = [{\n  id: 1,\n  type: 'hurricane',\n  name: 'Hurricane Maria',\n  location: {\n    lat: 18.2208,\n    lng: -66.5901\n  },\n  date: '2017-09-20',\n  description: 'Category 5 hurricane that devastated Puerto Rico',\n  impact: 'Over $90 billion in damage, 2,975 deaths',\n  intensity: 5\n}, {\n  id: 2,\n  type: 'wildfire',\n  name: 'California Camp Fire',\n  location: {\n    lat: 39.8039,\n    lng: -121.4356\n  },\n  date: '2018-11-08',\n  description: 'Most destructive wildfire in California history',\n  impact: '85 deaths, 18,804 structures destroyed',\n  intensity: 5\n}, {\n  id: 3,\n  type: 'flood',\n  name: 'Kerala Floods',\n  location: {\n    lat: 10.8505,\n    lng: 76.2711\n  },\n  date: '2018-08-08',\n  description: 'Severe flooding in the Indian state of Kerala',\n  impact: '483 deaths, 140,000 people displaced',\n  intensity: 4\n}, {\n  id: 4,\n  type: 'drought',\n  name: 'Cape Town Water Crisis',\n  location: {\n    lat: -33.9249,\n    lng: 18.4241\n  },\n  date: '2018-01-01',\n  description: 'Severe water shortage in Cape Town, South Africa',\n  impact: 'City nearly ran out of water, severe water restrictions',\n  intensity: 4\n}, {\n  id: 5,\n  type: 'heatwave',\n  name: 'European Heatwave',\n  location: {\n    lat: 48.8566,\n    lng: 2.3522\n  },\n  date: '2019-07-25',\n  description: 'Record-breaking temperatures across Europe',\n  impact: 'Over 2,500 deaths, infrastructure damage',\n  intensity: 5\n}, {\n  id: 6,\n  type: 'cyclone',\n  name: 'Cyclone Idai',\n  location: {\n    lat: -19.8335,\n    lng: 34.8888\n  },\n  date: '2019-03-15',\n  description: 'Tropical cyclone that hit Mozambique, Zimbabwe, and Malawi',\n  impact: 'Over 1,000 deaths, $2 billion in damages',\n  intensity: 4\n}, {\n  id: 7,\n  type: 'tornado',\n  name: 'Nashville Tornado',\n  location: {\n    lat: 36.1627,\n    lng: -86.7816\n  },\n  date: '2020-03-03',\n  description: 'EF3 tornado that struck Nashville, Tennessee',\n  impact: '25 deaths, 309 injuries, $1.5 billion in damages',\n  intensity: 3\n}, {\n  id: 8,\n  type: 'hurricane',\n  name: 'Hurricane Dorian',\n  location: {\n    lat: 26.5124,\n    lng: -78.6483\n  },\n  date: '2019-09-01',\n  description: 'Category 5 hurricane that devastated the Bahamas',\n  impact: '84 deaths, $3.4 billion in damages',\n  intensity: 5\n}];\n\n// Function to fetch global temperature data\nexport const fetchGlobalTemperature = async () => {\n  // In a real application, you would fetch from an actual API\n  // For example:\n  // const response = await axios.get('https://api.example.com/climate/temperature');\n  // return response.data;\n\n  // For now, we'll return mock data with a simulated delay\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(mockTemperatureData);\n    }, 800);\n  });\n};\n\n// Function to fetch CO2 concentration data\nexport const fetchCO2Data = async () => {\n  // In a real application, you would fetch from an actual API\n  // For example:\n  // const response = await axios.get('https://api.example.com/climate/co2');\n  // return response.data;\n\n  // For now, we'll return mock data with a simulated delay\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(mockCO2Data);\n    }, 600);\n  });\n};\n\n// Function to fetch sea level rise data\nexport const fetchSeaLevelData = async () => {\n  // In a real application, you would fetch from an actual API\n  // For example:\n  // const response = await axios.get('https://api.example.com/climate/sealevel');\n  // return response.data;\n\n  // For now, we'll return mock data with a simulated delay\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(mockSeaLevelData);\n    }, 700);\n  });\n};\n\n// Function to fetch extreme weather events data\nexport const fetchExtremeEvents = async () => {\n  // In a real application, you would fetch from an actual API\n  // For example:\n  // const response = await axios.get('https://api.example.com/climate/extremes');\n  // return response.data;\n\n  // For now, we'll return mock data with a simulated delay\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(mockExtremeEventsData);\n    }, 900);\n  });\n};\n\n// Function to fetch climate data by country\nexport const fetchCountryData = async countryCode => {\n  // In a real application, you would fetch from an actual API\n  // For example:\n  // const response = await axios.get(`https://api.example.com/climate/country/${countryCode}`);\n  // return response.data;\n\n  // For now, we'll return mock data with a simulated delay\n  const mockCountryData = {\n    temperature: {\n      current: 1.2,\n      projected2050: 2.4,\n      projected2100: 4.1\n    },\n    precipitation: {\n      change: -5.2,\n      droughtRisk: 'High',\n      floodRisk: 'Medium'\n    },\n    vulnerabilityIndex: 0.65,\n    co2Emissions: 8.5,\n    // tons per capita\n    renewableEnergy: 12.3 // percentage of total energy\n  };\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(mockCountryData);\n    }, 800);\n  });\n};\n\n// Function to fetch climate policy data\nexport const fetchClimatePolicies = async () => {\n  // In a real application, you would fetch from an actual API\n  // For example:\n  // const response = await axios.get('https://api.example.com/climate/policies');\n  // return response.data;\n\n  // For now, we'll return mock data with a simulated delay\n  const mockPolicyData = [{\n    id: 1,\n    name: 'Paris Agreement',\n    year: 2015,\n    description: 'International treaty on climate change mitigation',\n    signatories: 196,\n    goal: 'Limit global warming to well below 2Â°C above pre-industrial levels'\n  }, {\n    id: 2,\n    name: 'Kyoto Protocol',\n    year: 1997,\n    description: 'International treaty on reducing greenhouse gas emissions',\n    signatories: 192,\n    goal: 'Reduce greenhouse gas emissions by 5% from 1990 levels'\n  }, {\n    id: 3,\n    name: 'European Green Deal',\n    year: 2019,\n    description: 'EU initiative to become climate neutral',\n    signatories: 27,\n    goal: 'Make Europe climate neutral by 2050'\n  }];\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(mockPolicyData);\n    }, 700);\n  });\n};","map":{"version":3,"names":["axios","mockTemperatureData","year","anomaly","mockCO2Data","ppm","mockSeaLevelData","rise","mockExtremeEventsData","id","type","name","location","lat","lng","date","description","impact","intensity","fetchGlobalTemperature","Promise","resolve","setTimeout","fetchCO2Data","fetchSeaLevelData","fetchExtremeEvents","fetchCountryData","countryCode","mockCountryData","temperature","current","projected2050","projected2100","precipitation","change","droughtRisk","floodRisk","vulnerabilityIndex","co2Emissions","renewableEnergy","fetchClimatePolicies","mockPolicyData","signatories","goal"],"sources":["/Users/asit/CascadeProjects/climate-dashboard-new/src/services/climateService.js"],"sourcesContent":["import axios from 'axios';\n\n// Mock data for development purposes\n// In a production environment, you would replace these with actual API calls\n\n// Global temperature anomaly data (source: NASA GISS)\nconst mockTemperatureData = [\n  { year: 1880, anomaly: -0.16 },\n  { year: 1890, anomaly: -0.35 },\n  { year: 1900, anomaly: -0.09 },\n  { year: 1910, anomaly: -0.39 },\n  { year: 1920, anomaly: -0.27 },\n  { year: 1930, anomaly: -0.03 },\n  { year: 1940, anomaly: 0.12 },\n  { year: 1950, anomaly: -0.02 },\n  { year: 1960, anomaly: 0.03 },\n  { year: 1970, anomaly: 0.01 },\n  { year: 1980, anomaly: 0.27 },\n  { year: 1990, anomaly: 0.45 },\n  { year: 2000, anomaly: 0.61 },\n  { year: 2010, anomaly: 0.82 },\n  { year: 2020, anomaly: 1.02 },\n  { year: 2022, anomaly: 1.11 },\n];\n\n// CO2 concentration data (source: Mauna Loa Observatory)\nconst mockCO2Data = [\n  { year: 1960, ppm: 316.91 },\n  { year: 1970, ppm: 325.68 },\n  { year: 1980, ppm: 338.75 },\n  { year: 1990, ppm: 354.35 },\n  { year: 2000, ppm: 369.52 },\n  { year: 2010, ppm: 389.85 },\n  { year: 2020, ppm: 412.44 },\n  { year: 2022, ppm: 417.06 },\n];\n\n// Sea level rise data (source: CSIRO)\nconst mockSeaLevelData = [\n  { year: 1880, rise: -120 },\n  { year: 1900, rise: -100 },\n  { year: 1920, rise: -80 },\n  { year: 1940, rise: -60 },\n  { year: 1960, rise: -40 },\n  { year: 1980, rise: -20 },\n  { year: 2000, rise: 0 },\n  { year: 2020, rise: 90 },\n  { year: 2022, rise: 101 },\n];\n\n// Extreme weather events data\nconst mockExtremeEventsData = [\n  {\n    id: 1,\n    type: 'hurricane',\n    name: 'Hurricane Maria',\n    location: { lat: 18.2208, lng: -66.5901 },\n    date: '2017-09-20',\n    description: 'Category 5 hurricane that devastated Puerto Rico',\n    impact: 'Over $90 billion in damage, 2,975 deaths',\n    intensity: 5\n  },\n  {\n    id: 2,\n    type: 'wildfire',\n    name: 'California Camp Fire',\n    location: { lat: 39.8039, lng: -121.4356 },\n    date: '2018-11-08',\n    description: 'Most destructive wildfire in California history',\n    impact: '85 deaths, 18,804 structures destroyed',\n    intensity: 5\n  },\n  {\n    id: 3,\n    type: 'flood',\n    name: 'Kerala Floods',\n    location: { lat: 10.8505, lng: 76.2711 },\n    date: '2018-08-08',\n    description: 'Severe flooding in the Indian state of Kerala',\n    impact: '483 deaths, 140,000 people displaced',\n    intensity: 4\n  },\n  {\n    id: 4,\n    type: 'drought',\n    name: 'Cape Town Water Crisis',\n    location: { lat: -33.9249, lng: 18.4241 },\n    date: '2018-01-01',\n    description: 'Severe water shortage in Cape Town, South Africa',\n    impact: 'City nearly ran out of water, severe water restrictions',\n    intensity: 4\n  },\n  {\n    id: 5,\n    type: 'heatwave',\n    name: 'European Heatwave',\n    location: { lat: 48.8566, lng: 2.3522 },\n    date: '2019-07-25',\n    description: 'Record-breaking temperatures across Europe',\n    impact: 'Over 2,500 deaths, infrastructure damage',\n    intensity: 5\n  },\n  {\n    id: 6,\n    type: 'cyclone',\n    name: 'Cyclone Idai',\n    location: { lat: -19.8335, lng: 34.8888 },\n    date: '2019-03-15',\n    description: 'Tropical cyclone that hit Mozambique, Zimbabwe, and Malawi',\n    impact: 'Over 1,000 deaths, $2 billion in damages',\n    intensity: 4\n  },\n  {\n    id: 7,\n    type: 'tornado',\n    name: 'Nashville Tornado',\n    location: { lat: 36.1627, lng: -86.7816 },\n    date: '2020-03-03',\n    description: 'EF3 tornado that struck Nashville, Tennessee',\n    impact: '25 deaths, 309 injuries, $1.5 billion in damages',\n    intensity: 3\n  },\n  {\n    id: 8,\n    type: 'hurricane',\n    name: 'Hurricane Dorian',\n    location: { lat: 26.5124, lng: -78.6483 },\n    date: '2019-09-01',\n    description: 'Category 5 hurricane that devastated the Bahamas',\n    impact: '84 deaths, $3.4 billion in damages',\n    intensity: 5\n  }\n];\n\n// Function to fetch global temperature data\nexport const fetchGlobalTemperature = async () => {\n  // In a real application, you would fetch from an actual API\n  // For example:\n  // const response = await axios.get('https://api.example.com/climate/temperature');\n  // return response.data;\n  \n  // For now, we'll return mock data with a simulated delay\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(mockTemperatureData);\n    }, 800);\n  });\n};\n\n// Function to fetch CO2 concentration data\nexport const fetchCO2Data = async () => {\n  // In a real application, you would fetch from an actual API\n  // For example:\n  // const response = await axios.get('https://api.example.com/climate/co2');\n  // return response.data;\n  \n  // For now, we'll return mock data with a simulated delay\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(mockCO2Data);\n    }, 600);\n  });\n};\n\n// Function to fetch sea level rise data\nexport const fetchSeaLevelData = async () => {\n  // In a real application, you would fetch from an actual API\n  // For example:\n  // const response = await axios.get('https://api.example.com/climate/sealevel');\n  // return response.data;\n  \n  // For now, we'll return mock data with a simulated delay\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(mockSeaLevelData);\n    }, 700);\n  });\n};\n\n// Function to fetch extreme weather events data\nexport const fetchExtremeEvents = async () => {\n  // In a real application, you would fetch from an actual API\n  // For example:\n  // const response = await axios.get('https://api.example.com/climate/extremes');\n  // return response.data;\n  \n  // For now, we'll return mock data with a simulated delay\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(mockExtremeEventsData);\n    }, 900);\n  });\n};\n\n// Function to fetch climate data by country\nexport const fetchCountryData = async (countryCode) => {\n  // In a real application, you would fetch from an actual API\n  // For example:\n  // const response = await axios.get(`https://api.example.com/climate/country/${countryCode}`);\n  // return response.data;\n  \n  // For now, we'll return mock data with a simulated delay\n  const mockCountryData = {\n    temperature: {\n      current: 1.2,\n      projected2050: 2.4,\n      projected2100: 4.1\n    },\n    precipitation: {\n      change: -5.2,\n      droughtRisk: 'High',\n      floodRisk: 'Medium'\n    },\n    vulnerabilityIndex: 0.65,\n    co2Emissions: 8.5, // tons per capita\n    renewableEnergy: 12.3, // percentage of total energy\n  };\n  \n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(mockCountryData);\n    }, 800);\n  });\n};\n\n// Function to fetch climate policy data\nexport const fetchClimatePolicies = async () => {\n  // In a real application, you would fetch from an actual API\n  // For example:\n  // const response = await axios.get('https://api.example.com/climate/policies');\n  // return response.data;\n  \n  // For now, we'll return mock data with a simulated delay\n  const mockPolicyData = [\n    {\n      id: 1,\n      name: 'Paris Agreement',\n      year: 2015,\n      description: 'International treaty on climate change mitigation',\n      signatories: 196,\n      goal: 'Limit global warming to well below 2Â°C above pre-industrial levels'\n    },\n    {\n      id: 2,\n      name: 'Kyoto Protocol',\n      year: 1997,\n      description: 'International treaty on reducing greenhouse gas emissions',\n      signatories: 192,\n      goal: 'Reduce greenhouse gas emissions by 5% from 1990 levels'\n    },\n    {\n      id: 3,\n      name: 'European Green Deal',\n      year: 2019,\n      description: 'EU initiative to become climate neutral',\n      signatories: 27,\n      goal: 'Make Europe climate neutral by 2050'\n    }\n  ];\n  \n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(mockPolicyData);\n    }, 700);\n  });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}